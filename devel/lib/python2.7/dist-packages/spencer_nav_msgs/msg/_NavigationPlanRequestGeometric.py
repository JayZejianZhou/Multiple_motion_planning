# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spencer_nav_msgs/NavigationPlanRequestGeometric.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import spencer_nav_msgs.msg
import geometry_msgs.msg
import genpy
import spencer_tracking_msgs.msg
import std_msgs.msg

class NavigationPlanRequestGeometric(genpy.Message):
  _md5sum = "d831e9baee74d326802d8896d95cac62"
  _type = "spencer_nav_msgs/NavigationPlanRequestGeometric"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# message defining a planning request to motion planner from task planner

# TODO: Is this message definition deprecated!?
# I believe move_base uses a PoseStamped (on a separate topic) to specify the goal;
# the other information (tracked persons etc.) are published on separate topics anyway,
# so it probably does not make much sense to include them here. --Timm

Header header
geometry_msgs/Pose  start				# start position
geometry_msgs/Pose  goal				# goal position
spencer_tracking_msgs/DetectedPersons detectedPersons	# detected persons from perception
spencer_tracking_msgs/TrackedPersons trackedPersons	# tracked persons from perception
spencer_tracking_msgs/TrackedGroups trackedGroups	# tracked groups 
NavParams params					# parameters / strategies fror motion planner to adapt to

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: spencer_tracking_msgs/DetectedPersons
# Message with all currently detected persons
#

Header                  header          # Header containing timestamp etc. of this message
DetectedPerson[]        detections      # All persons that are currently being detected
================================================================================
MSG: spencer_tracking_msgs/DetectedPerson
# Message describing a detection of a person
#

# Unique id of the detection, monotonically increasing over time
uint64          detection_id

# (Pseudo-)probabilistic value between 0.0 and 1.0 describing the detector's confidence in the detection
float64         confidence

# 3D pose (position + orientation) of the *center* of the detection
# check covariance to see which dimensions are actually set! unset dimensions shall have a covariance > 9999
geometry_msgs/PoseWithCovariance    pose    

# Sensor modality / detector type, see example constants below. 
# used e.g. later in tracking to check which tracks have been visually confirmed
string          modality            

                                    
string          MODALITY_GENERIC_LASER_2D = laser2d
string          MODALITY_GENERIC_LASER_3D = laser3d
string          MODALITY_GENERIC_MONOCULAR_VISION = mono
string          MODALITY_GENERIC_STEREO_VISION = stereo
string          MODALITY_GENERIC_RGBD = rgbd

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: spencer_tracking_msgs/TrackedPersons
# Message with all currently tracked persons 
#

Header              header      # Header containing timestamp etc. of this message
TrackedPerson[]     tracks      # All persons that are currently being tracked
================================================================================
MSG: spencer_tracking_msgs/TrackedPerson
# Message defining a tracked person
#

uint64      track_id        # unique identifier of the target, consistent over time
bool        is_occluded     # if the track is currently not observable in a physical way
bool        is_matched      # if the track is currently matched by a detection
uint64      detection_id    # id of the corresponding detection in the current cycle (undefined if occluded)
duration    age             # age of the track

# The following fields are extracted from the Kalman state x and its covariance C

geometry_msgs/PoseWithCovariance       pose   # pose of the track (z value and orientation might not be set, check if corresponding variance on diagonal is > 99999)

geometry_msgs/TwistWithCovariance   twist     # velocity of the track (z value and rotational velocities might not be set, check if corresponding variance on diagonal is > 99999)

================================================================================
MSG: geometry_msgs/TwistWithCovariance
# This expresses velocity in free space with uncertainty.

Twist twist

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: spencer_tracking_msgs/TrackedGroups
# Message with all currently tracked groups 
#

Header              header      # Header containing timestamp etc. of this message
TrackedGroup[]      groups      # All groups that are currently being tracked
================================================================================
MSG: spencer_tracking_msgs/TrackedGroup
# Message defining a tracked group
#

uint64      group_id        # unique identifier of the target, consistent over time

duration    age             # age of the group

geometry_msgs/PoseWithCovariance    centerOfGravity   # mean and covariance of the group (calculated from its person tracks)

uint64[]    track_ids       # IDs of the tracked persons in this group. See srl_tracking_msgs/TrackedPersons
================================================================================
MSG: spencer_nav_msgs/NavParams
# message defining a parameters or strategies for motion planner to adapt based on input from learning

Header header
bool directional_cost	# if to use directional_cost model or not
"""
  __slots__ = ['header','start','goal','detectedPersons','trackedPersons','trackedGroups','params']
  _slot_types = ['std_msgs/Header','geometry_msgs/Pose','geometry_msgs/Pose','spencer_tracking_msgs/DetectedPersons','spencer_tracking_msgs/TrackedPersons','spencer_tracking_msgs/TrackedGroups','spencer_nav_msgs/NavParams']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,start,goal,detectedPersons,trackedPersons,trackedGroups,params

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NavigationPlanRequestGeometric, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.start is None:
        self.start = geometry_msgs.msg.Pose()
      if self.goal is None:
        self.goal = geometry_msgs.msg.Pose()
      if self.detectedPersons is None:
        self.detectedPersons = spencer_tracking_msgs.msg.DetectedPersons()
      if self.trackedPersons is None:
        self.trackedPersons = spencer_tracking_msgs.msg.TrackedPersons()
      if self.trackedGroups is None:
        self.trackedGroups = spencer_tracking_msgs.msg.TrackedGroups()
      if self.params is None:
        self.params = spencer_nav_msgs.msg.NavParams()
    else:
      self.header = std_msgs.msg.Header()
      self.start = geometry_msgs.msg.Pose()
      self.goal = geometry_msgs.msg.Pose()
      self.detectedPersons = spencer_tracking_msgs.msg.DetectedPersons()
      self.trackedPersons = spencer_tracking_msgs.msg.TrackedPersons()
      self.trackedGroups = spencer_tracking_msgs.msg.TrackedGroups()
      self.params = spencer_nav_msgs.msg.NavParams()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_14d3I.pack(_x.start.position.x, _x.start.position.y, _x.start.position.z, _x.start.orientation.x, _x.start.orientation.y, _x.start.orientation.z, _x.start.orientation.w, _x.goal.position.x, _x.goal.position.y, _x.goal.position.z, _x.goal.orientation.x, _x.goal.orientation.y, _x.goal.orientation.z, _x.goal.orientation.w, _x.detectedPersons.header.seq, _x.detectedPersons.header.stamp.secs, _x.detectedPersons.header.stamp.nsecs))
      _x = self.detectedPersons.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.detectedPersons.detections)
      buff.write(_struct_I.pack(length))
      for val1 in self.detectedPersons.detections:
        _x = val1
        buff.write(_struct_Qd.pack(_x.detection_id, _x.confidence))
        _v1 = val1.pose
        _v2 = _v1.pose
        _v3 = _v2.position
        _x = _v3
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v4 = _v2.orientation
        _x = _v4
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_36d.pack(*_v1.covariance))
        _x = val1.modality
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.trackedPersons.header.seq, _x.trackedPersons.header.stamp.secs, _x.trackedPersons.header.stamp.nsecs))
      _x = self.trackedPersons.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.trackedPersons.tracks)
      buff.write(_struct_I.pack(length))
      for val1 in self.trackedPersons.tracks:
        _x = val1
        buff.write(_struct_Q2BQ.pack(_x.track_id, _x.is_occluded, _x.is_matched, _x.detection_id))
        _v5 = val1.age
        _x = _v5
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        _v6 = val1.pose
        _v7 = _v6.pose
        _v8 = _v7.position
        _x = _v8
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v9 = _v7.orientation
        _x = _v9
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_36d.pack(*_v6.covariance))
        _v10 = val1.twist
        _v11 = _v10.twist
        _v12 = _v11.linear
        _x = _v12
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v13 = _v11.angular
        _x = _v13
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_36d.pack(*_v10.covariance))
      _x = self
      buff.write(_struct_3I.pack(_x.trackedGroups.header.seq, _x.trackedGroups.header.stamp.secs, _x.trackedGroups.header.stamp.nsecs))
      _x = self.trackedGroups.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.trackedGroups.groups)
      buff.write(_struct_I.pack(length))
      for val1 in self.trackedGroups.groups:
        buff.write(_struct_Q.pack(val1.group_id))
        _v14 = val1.age
        _x = _v14
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        _v15 = val1.centerOfGravity
        _v16 = _v15.pose
        _v17 = _v16.position
        _x = _v17
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v18 = _v16.orientation
        _x = _v18
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_36d.pack(*_v15.covariance))
        length = len(val1.track_ids)
        buff.write(_struct_I.pack(length))
        pattern = '<%sQ'%length
        buff.write(struct.pack(pattern, *val1.track_ids))
      _x = self
      buff.write(_struct_3I.pack(_x.params.header.seq, _x.params.header.stamp.secs, _x.params.header.stamp.nsecs))
      _x = self.params.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.params.directional_cost))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.start is None:
        self.start = geometry_msgs.msg.Pose()
      if self.goal is None:
        self.goal = geometry_msgs.msg.Pose()
      if self.detectedPersons is None:
        self.detectedPersons = spencer_tracking_msgs.msg.DetectedPersons()
      if self.trackedPersons is None:
        self.trackedPersons = spencer_tracking_msgs.msg.TrackedPersons()
      if self.trackedGroups is None:
        self.trackedGroups = spencer_tracking_msgs.msg.TrackedGroups()
      if self.params is None:
        self.params = spencer_nav_msgs.msg.NavParams()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 124
      (_x.start.position.x, _x.start.position.y, _x.start.position.z, _x.start.orientation.x, _x.start.orientation.y, _x.start.orientation.z, _x.start.orientation.w, _x.goal.position.x, _x.goal.position.y, _x.goal.position.z, _x.goal.orientation.x, _x.goal.orientation.y, _x.goal.orientation.z, _x.goal.orientation.w, _x.detectedPersons.header.seq, _x.detectedPersons.header.stamp.secs, _x.detectedPersons.header.stamp.nsecs,) = _struct_14d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.detectedPersons.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.detectedPersons.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.detectedPersons.detections = []
      for i in range(0, length):
        val1 = spencer_tracking_msgs.msg.DetectedPerson()
        _x = val1
        start = end
        end += 16
        (_x.detection_id, _x.confidence,) = _struct_Qd.unpack(str[start:end])
        _v19 = val1.pose
        _v20 = _v19.pose
        _v21 = _v20.position
        _x = _v21
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v22 = _v20.orientation
        _x = _v22
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 288
        _v19.covariance = _struct_36d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.modality = str[start:end].decode('utf-8')
        else:
          val1.modality = str[start:end]
        self.detectedPersons.detections.append(val1)
      _x = self
      start = end
      end += 12
      (_x.trackedPersons.header.seq, _x.trackedPersons.header.stamp.secs, _x.trackedPersons.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trackedPersons.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.trackedPersons.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trackedPersons.tracks = []
      for i in range(0, length):
        val1 = spencer_tracking_msgs.msg.TrackedPerson()
        _x = val1
        start = end
        end += 18
        (_x.track_id, _x.is_occluded, _x.is_matched, _x.detection_id,) = _struct_Q2BQ.unpack(str[start:end])
        val1.is_occluded = bool(val1.is_occluded)
        val1.is_matched = bool(val1.is_matched)
        _v23 = val1.age
        _x = _v23
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        _v24 = val1.pose
        _v25 = _v24.pose
        _v26 = _v25.position
        _x = _v26
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v27 = _v25.orientation
        _x = _v27
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 288
        _v24.covariance = _struct_36d.unpack(str[start:end])
        _v28 = val1.twist
        _v29 = _v28.twist
        _v30 = _v29.linear
        _x = _v30
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v31 = _v29.angular
        _x = _v31
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 288
        _v28.covariance = _struct_36d.unpack(str[start:end])
        self.trackedPersons.tracks.append(val1)
      _x = self
      start = end
      end += 12
      (_x.trackedGroups.header.seq, _x.trackedGroups.header.stamp.secs, _x.trackedGroups.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trackedGroups.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.trackedGroups.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trackedGroups.groups = []
      for i in range(0, length):
        val1 = spencer_tracking_msgs.msg.TrackedGroup()
        start = end
        end += 8
        (val1.group_id,) = _struct_Q.unpack(str[start:end])
        _v32 = val1.age
        _x = _v32
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        _v33 = val1.centerOfGravity
        _v34 = _v33.pose
        _v35 = _v34.position
        _x = _v35
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v36 = _v34.orientation
        _x = _v36
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 288
        _v33.covariance = _struct_36d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sQ'%length
        start = end
        end += struct.calcsize(pattern)
        val1.track_ids = struct.unpack(pattern, str[start:end])
        self.trackedGroups.groups.append(val1)
      _x = self
      start = end
      end += 12
      (_x.params.header.seq, _x.params.header.stamp.secs, _x.params.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.params.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.params.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.params.directional_cost,) = _struct_B.unpack(str[start:end])
      self.params.directional_cost = bool(self.params.directional_cost)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_14d3I.pack(_x.start.position.x, _x.start.position.y, _x.start.position.z, _x.start.orientation.x, _x.start.orientation.y, _x.start.orientation.z, _x.start.orientation.w, _x.goal.position.x, _x.goal.position.y, _x.goal.position.z, _x.goal.orientation.x, _x.goal.orientation.y, _x.goal.orientation.z, _x.goal.orientation.w, _x.detectedPersons.header.seq, _x.detectedPersons.header.stamp.secs, _x.detectedPersons.header.stamp.nsecs))
      _x = self.detectedPersons.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.detectedPersons.detections)
      buff.write(_struct_I.pack(length))
      for val1 in self.detectedPersons.detections:
        _x = val1
        buff.write(_struct_Qd.pack(_x.detection_id, _x.confidence))
        _v37 = val1.pose
        _v38 = _v37.pose
        _v39 = _v38.position
        _x = _v39
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v40 = _v38.orientation
        _x = _v40
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_v37.covariance.tostring())
        _x = val1.modality
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.trackedPersons.header.seq, _x.trackedPersons.header.stamp.secs, _x.trackedPersons.header.stamp.nsecs))
      _x = self.trackedPersons.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.trackedPersons.tracks)
      buff.write(_struct_I.pack(length))
      for val1 in self.trackedPersons.tracks:
        _x = val1
        buff.write(_struct_Q2BQ.pack(_x.track_id, _x.is_occluded, _x.is_matched, _x.detection_id))
        _v41 = val1.age
        _x = _v41
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        _v42 = val1.pose
        _v43 = _v42.pose
        _v44 = _v43.position
        _x = _v44
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v45 = _v43.orientation
        _x = _v45
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_v42.covariance.tostring())
        _v46 = val1.twist
        _v47 = _v46.twist
        _v48 = _v47.linear
        _x = _v48
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v49 = _v47.angular
        _x = _v49
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_v46.covariance.tostring())
      _x = self
      buff.write(_struct_3I.pack(_x.trackedGroups.header.seq, _x.trackedGroups.header.stamp.secs, _x.trackedGroups.header.stamp.nsecs))
      _x = self.trackedGroups.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.trackedGroups.groups)
      buff.write(_struct_I.pack(length))
      for val1 in self.trackedGroups.groups:
        buff.write(_struct_Q.pack(val1.group_id))
        _v50 = val1.age
        _x = _v50
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        _v51 = val1.centerOfGravity
        _v52 = _v51.pose
        _v53 = _v52.position
        _x = _v53
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v54 = _v52.orientation
        _x = _v54
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_v51.covariance.tostring())
        length = len(val1.track_ids)
        buff.write(_struct_I.pack(length))
        pattern = '<%sQ'%length
        buff.write(val1.track_ids.tostring())
      _x = self
      buff.write(_struct_3I.pack(_x.params.header.seq, _x.params.header.stamp.secs, _x.params.header.stamp.nsecs))
      _x = self.params.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.params.directional_cost))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.start is None:
        self.start = geometry_msgs.msg.Pose()
      if self.goal is None:
        self.goal = geometry_msgs.msg.Pose()
      if self.detectedPersons is None:
        self.detectedPersons = spencer_tracking_msgs.msg.DetectedPersons()
      if self.trackedPersons is None:
        self.trackedPersons = spencer_tracking_msgs.msg.TrackedPersons()
      if self.trackedGroups is None:
        self.trackedGroups = spencer_tracking_msgs.msg.TrackedGroups()
      if self.params is None:
        self.params = spencer_nav_msgs.msg.NavParams()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 124
      (_x.start.position.x, _x.start.position.y, _x.start.position.z, _x.start.orientation.x, _x.start.orientation.y, _x.start.orientation.z, _x.start.orientation.w, _x.goal.position.x, _x.goal.position.y, _x.goal.position.z, _x.goal.orientation.x, _x.goal.orientation.y, _x.goal.orientation.z, _x.goal.orientation.w, _x.detectedPersons.header.seq, _x.detectedPersons.header.stamp.secs, _x.detectedPersons.header.stamp.nsecs,) = _struct_14d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.detectedPersons.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.detectedPersons.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.detectedPersons.detections = []
      for i in range(0, length):
        val1 = spencer_tracking_msgs.msg.DetectedPerson()
        _x = val1
        start = end
        end += 16
        (_x.detection_id, _x.confidence,) = _struct_Qd.unpack(str[start:end])
        _v55 = val1.pose
        _v56 = _v55.pose
        _v57 = _v56.position
        _x = _v57
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v58 = _v56.orientation
        _x = _v58
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 288
        _v55.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.modality = str[start:end].decode('utf-8')
        else:
          val1.modality = str[start:end]
        self.detectedPersons.detections.append(val1)
      _x = self
      start = end
      end += 12
      (_x.trackedPersons.header.seq, _x.trackedPersons.header.stamp.secs, _x.trackedPersons.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trackedPersons.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.trackedPersons.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trackedPersons.tracks = []
      for i in range(0, length):
        val1 = spencer_tracking_msgs.msg.TrackedPerson()
        _x = val1
        start = end
        end += 18
        (_x.track_id, _x.is_occluded, _x.is_matched, _x.detection_id,) = _struct_Q2BQ.unpack(str[start:end])
        val1.is_occluded = bool(val1.is_occluded)
        val1.is_matched = bool(val1.is_matched)
        _v59 = val1.age
        _x = _v59
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        _v60 = val1.pose
        _v61 = _v60.pose
        _v62 = _v61.position
        _x = _v62
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v63 = _v61.orientation
        _x = _v63
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 288
        _v60.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v64 = val1.twist
        _v65 = _v64.twist
        _v66 = _v65.linear
        _x = _v66
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v67 = _v65.angular
        _x = _v67
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 288
        _v64.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        self.trackedPersons.tracks.append(val1)
      _x = self
      start = end
      end += 12
      (_x.trackedGroups.header.seq, _x.trackedGroups.header.stamp.secs, _x.trackedGroups.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trackedGroups.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.trackedGroups.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trackedGroups.groups = []
      for i in range(0, length):
        val1 = spencer_tracking_msgs.msg.TrackedGroup()
        start = end
        end += 8
        (val1.group_id,) = _struct_Q.unpack(str[start:end])
        _v68 = val1.age
        _x = _v68
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        _v69 = val1.centerOfGravity
        _v70 = _v69.pose
        _v71 = _v70.position
        _x = _v71
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v72 = _v70.orientation
        _x = _v72
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 288
        _v69.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sQ'%length
        start = end
        end += struct.calcsize(pattern)
        val1.track_ids = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
        self.trackedGroups.groups.append(val1)
      _x = self
      start = end
      end += 12
      (_x.params.header.seq, _x.params.header.stamp.secs, _x.params.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.params.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.params.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.params.directional_cost,) = _struct_B.unpack(str[start:end])
      self.params.directional_cost = bool(self.params.directional_cost)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_36d = struct.Struct("<36d")
_struct_14d3I = struct.Struct("<14d3I")
_struct_Q = struct.Struct("<Q")
_struct_3I = struct.Struct("<3I")
_struct_Qd = struct.Struct("<Qd")
_struct_Q2BQ = struct.Struct("<Q2BQ")
_struct_4d = struct.Struct("<4d")
_struct_2i = struct.Struct("<2i")
_struct_3d = struct.Struct("<3d")
