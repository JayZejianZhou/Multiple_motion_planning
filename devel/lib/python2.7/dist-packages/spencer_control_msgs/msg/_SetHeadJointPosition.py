# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spencer_control_msgs/SetHeadJointPosition.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetHeadJointPosition(genpy.Message):
  _md5sum = "cd1f3003aa58891e47e7fafb9472c782"
  _type = "spencer_control_msgs/SetHeadJointPosition"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """byte    joint  # see list below
float32 angle  # in radians
float32 velocity # in radians/second



### Constants ###

byte    JOINT_PAN = 0
byte    JOINT_TILT = 1
byte    JOINT_EYES = 2

float32 PAN_MIN_ANGLE = -0.5235
float32 PAN_MAX_ANGLE = +4.7123
float32 PAN_HOME = 3.1416

float32 TILT_MIN_ANGLE = -0.4363
float32 TILT_MAX_ANGLE = +0.4363
float32 TILT_HOME = 0

float32 EYES_MIN_ANGLE = -0.4
float32 EYES_MAX_ANGLE = +0.4
float32 EYES_HOME = 0

float32 MIN_VEL = 0.05
float32 MAX_VEL = 2.6

### reference ###
# -3.6651 = -7pi/6 = -210 degrees right
# 1.5708 = pi/2 = 90 degrees left
# -0.4363 = -5pi/36 = 25 degrees up
# 0.4363 = 5pi/36 = 25 degrees down
# -1.0471 = -pi/3 = -60 degrees right
# 1.0471 = pi/3 = 60 degrees left
"""
  # Pseudo-constants
  JOINT_PAN = 0
  JOINT_TILT = 1
  JOINT_EYES = 2
  PAN_MIN_ANGLE = -0.5235
  PAN_MAX_ANGLE = 4.7123
  PAN_HOME = 3.1416
  TILT_MIN_ANGLE = -0.4363
  TILT_MAX_ANGLE = 0.4363
  TILT_HOME = 0.0
  EYES_MIN_ANGLE = -0.4
  EYES_MAX_ANGLE = 0.4
  EYES_HOME = 0.0
  MIN_VEL = 0.05
  MAX_VEL = 2.6

  __slots__ = ['joint','angle','velocity']
  _slot_types = ['byte','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joint,angle,velocity

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetHeadJointPosition, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.joint is None:
        self.joint = 0
      if self.angle is None:
        self.angle = 0.
      if self.velocity is None:
        self.velocity = 0.
    else:
      self.joint = 0
      self.angle = 0.
      self.velocity = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_b2f.pack(_x.joint, _x.angle, _x.velocity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.joint, _x.angle, _x.velocity,) = _struct_b2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_b2f.pack(_x.joint, _x.angle, _x.velocity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.joint, _x.angle, _x.velocity,) = _struct_b2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b2f = struct.Struct("<b2f")
