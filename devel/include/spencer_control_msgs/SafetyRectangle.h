// Generated by gencpp from file spencer_control_msgs/SafetyRectangle.msg
// DO NOT EDIT!


#ifndef SPENCER_CONTROL_MSGS_MESSAGE_SAFETYRECTANGLE_H
#define SPENCER_CONTROL_MSGS_MESSAGE_SAFETYRECTANGLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace spencer_control_msgs
{
template <class ContainerAllocator>
struct SafetyRectangle_
{
  typedef SafetyRectangle_<ContainerAllocator> Type;

  SafetyRectangle_()
    : header()
    , warning_depth(0.0)
    , warning_half_width(0.0)
    , error_depth(0.0)
    , error_half_width(0.0)  {
    }
  SafetyRectangle_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , warning_depth(0.0)
    , warning_half_width(0.0)
    , error_depth(0.0)
    , error_half_width(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _warning_depth_type;
  _warning_depth_type warning_depth;

   typedef float _warning_half_width_type;
  _warning_half_width_type warning_half_width;

   typedef float _error_depth_type;
  _error_depth_type error_depth;

   typedef float _error_half_width_type;
  _error_half_width_type error_half_width;




  typedef boost::shared_ptr< ::spencer_control_msgs::SafetyRectangle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spencer_control_msgs::SafetyRectangle_<ContainerAllocator> const> ConstPtr;

}; // struct SafetyRectangle_

typedef ::spencer_control_msgs::SafetyRectangle_<std::allocator<void> > SafetyRectangle;

typedef boost::shared_ptr< ::spencer_control_msgs::SafetyRectangle > SafetyRectanglePtr;
typedef boost::shared_ptr< ::spencer_control_msgs::SafetyRectangle const> SafetyRectangleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spencer_control_msgs::SafetyRectangle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spencer_control_msgs::SafetyRectangle_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace spencer_control_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'spencer_control_msgs': ['/home/zejian/catkin_ws/src/pedsim_ros/visualization/spencer_messages/control/spencer_control_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::spencer_control_msgs::SafetyRectangle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spencer_control_msgs::SafetyRectangle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spencer_control_msgs::SafetyRectangle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spencer_control_msgs::SafetyRectangle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spencer_control_msgs::SafetyRectangle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spencer_control_msgs::SafetyRectangle_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spencer_control_msgs::SafetyRectangle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9c34de6ca4a8977249c48fa1beb73b3c";
  }

  static const char* value(const ::spencer_control_msgs::SafetyRectangle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9c34de6ca4a89772ULL;
  static const uint64_t static_value2 = 0x49c48fa1beb73b3cULL;
};

template<class ContainerAllocator>
struct DataType< ::spencer_control_msgs::SafetyRectangle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spencer_control_msgs/SafetyRectangle";
  }

  static const char* value(const ::spencer_control_msgs::SafetyRectangle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spencer_control_msgs::SafetyRectangle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header     header\n\
\n\
# Depth and half width of the safety rectangle.\n\
#\n\
# NOTE: Half width instead of full width, since the safety rectangle is *centered* at the y coordinate\n\
# of the coordinate frame specified in the header (frame_id).\n\
# In the x direction (depth), however, the safety rectangle *begins* in the origin (x = 0).\n\
\n\
float32             warning_depth        # into x direction\n\
float32             warning_half_width   # into y direction\n\
\n\
float32             error_depth          # into x direction\n\
float32             error_half_width     # into y direction\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::spencer_control_msgs::SafetyRectangle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spencer_control_msgs::SafetyRectangle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.warning_depth);
      stream.next(m.warning_half_width);
      stream.next(m.error_depth);
      stream.next(m.error_half_width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SafetyRectangle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spencer_control_msgs::SafetyRectangle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spencer_control_msgs::SafetyRectangle_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "warning_depth: ";
    Printer<float>::stream(s, indent + "  ", v.warning_depth);
    s << indent << "warning_half_width: ";
    Printer<float>::stream(s, indent + "  ", v.warning_half_width);
    s << indent << "error_depth: ";
    Printer<float>::stream(s, indent + "  ", v.error_depth);
    s << indent << "error_half_width: ";
    Printer<float>::stream(s, indent + "  ", v.error_half_width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPENCER_CONTROL_MSGS_MESSAGE_SAFETYRECTANGLE_H
