// Generated by gencpp from file spencer_control_msgs/SetHeadJointPosition.msg
// DO NOT EDIT!


#ifndef SPENCER_CONTROL_MSGS_MESSAGE_SETHEADJOINTPOSITION_H
#define SPENCER_CONTROL_MSGS_MESSAGE_SETHEADJOINTPOSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spencer_control_msgs
{
template <class ContainerAllocator>
struct SetHeadJointPosition_
{
  typedef SetHeadJointPosition_<ContainerAllocator> Type;

  SetHeadJointPosition_()
    : joint(0)
    , angle(0.0)
    , velocity(0.0)  {
    }
  SetHeadJointPosition_(const ContainerAllocator& _alloc)
    : joint(0)
    , angle(0.0)
    , velocity(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _joint_type;
  _joint_type joint;

   typedef float _angle_type;
  _angle_type angle;

   typedef float _velocity_type;
  _velocity_type velocity;


    enum { JOINT_PAN = 0 };
     enum { JOINT_TILT = 1 };
     enum { JOINT_EYES = 2 };
     static const float PAN_MIN_ANGLE;
     static const float PAN_MAX_ANGLE;
     static const float PAN_HOME;
     static const float TILT_MIN_ANGLE;
     static const float TILT_MAX_ANGLE;
     static const float TILT_HOME;
     static const float EYES_MIN_ANGLE;
     static const float EYES_MAX_ANGLE;
     static const float EYES_HOME;
     static const float MIN_VEL;
     static const float MAX_VEL;
 

  typedef boost::shared_ptr< ::spencer_control_msgs::SetHeadJointPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spencer_control_msgs::SetHeadJointPosition_<ContainerAllocator> const> ConstPtr;

}; // struct SetHeadJointPosition_

typedef ::spencer_control_msgs::SetHeadJointPosition_<std::allocator<void> > SetHeadJointPosition;

typedef boost::shared_ptr< ::spencer_control_msgs::SetHeadJointPosition > SetHeadJointPositionPtr;
typedef boost::shared_ptr< ::spencer_control_msgs::SetHeadJointPosition const> SetHeadJointPositionConstPtr;

// constants requiring out of line definition

   

   

   

   
   template<typename ContainerAllocator> const float
      SetHeadJointPosition_<ContainerAllocator>::PAN_MIN_ANGLE =
        
          -0.5235
        
        ;
   

   
   template<typename ContainerAllocator> const float
      SetHeadJointPosition_<ContainerAllocator>::PAN_MAX_ANGLE =
        
          4.7123
        
        ;
   

   
   template<typename ContainerAllocator> const float
      SetHeadJointPosition_<ContainerAllocator>::PAN_HOME =
        
          3.1416
        
        ;
   

   
   template<typename ContainerAllocator> const float
      SetHeadJointPosition_<ContainerAllocator>::TILT_MIN_ANGLE =
        
          -0.4363
        
        ;
   

   
   template<typename ContainerAllocator> const float
      SetHeadJointPosition_<ContainerAllocator>::TILT_MAX_ANGLE =
        
          0.4363
        
        ;
   

   
   template<typename ContainerAllocator> const float
      SetHeadJointPosition_<ContainerAllocator>::TILT_HOME =
        
          0.0
        
        ;
   

   
   template<typename ContainerAllocator> const float
      SetHeadJointPosition_<ContainerAllocator>::EYES_MIN_ANGLE =
        
          -0.4
        
        ;
   

   
   template<typename ContainerAllocator> const float
      SetHeadJointPosition_<ContainerAllocator>::EYES_MAX_ANGLE =
        
          0.4
        
        ;
   

   
   template<typename ContainerAllocator> const float
      SetHeadJointPosition_<ContainerAllocator>::EYES_HOME =
        
          0.0
        
        ;
   

   
   template<typename ContainerAllocator> const float
      SetHeadJointPosition_<ContainerAllocator>::MIN_VEL =
        
          0.05
        
        ;
   

   
   template<typename ContainerAllocator> const float
      SetHeadJointPosition_<ContainerAllocator>::MAX_VEL =
        
          2.6
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spencer_control_msgs::SetHeadJointPosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spencer_control_msgs::SetHeadJointPosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace spencer_control_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'spencer_control_msgs': ['/home/zejian/catkin_ws/src/pedsim_ros/visualization/spencer_messages/control/spencer_control_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::spencer_control_msgs::SetHeadJointPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spencer_control_msgs::SetHeadJointPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spencer_control_msgs::SetHeadJointPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spencer_control_msgs::SetHeadJointPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spencer_control_msgs::SetHeadJointPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spencer_control_msgs::SetHeadJointPosition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spencer_control_msgs::SetHeadJointPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cd1f3003aa58891e47e7fafb9472c782";
  }

  static const char* value(const ::spencer_control_msgs::SetHeadJointPosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcd1f3003aa58891eULL;
  static const uint64_t static_value2 = 0x47e7fafb9472c782ULL;
};

template<class ContainerAllocator>
struct DataType< ::spencer_control_msgs::SetHeadJointPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spencer_control_msgs/SetHeadJointPosition";
  }

  static const char* value(const ::spencer_control_msgs::SetHeadJointPosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spencer_control_msgs::SetHeadJointPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "byte    joint  # see list below\n\
float32 angle  # in radians\n\
float32 velocity # in radians/second\n\
\n\
\n\
\n\
### Constants ###\n\
\n\
byte    JOINT_PAN = 0\n\
byte    JOINT_TILT = 1\n\
byte    JOINT_EYES = 2\n\
\n\
float32 PAN_MIN_ANGLE = -0.5235\n\
float32 PAN_MAX_ANGLE = +4.7123\n\
float32 PAN_HOME = 3.1416\n\
\n\
float32 TILT_MIN_ANGLE = -0.4363\n\
float32 TILT_MAX_ANGLE = +0.4363\n\
float32 TILT_HOME = 0\n\
\n\
float32 EYES_MIN_ANGLE = -0.4\n\
float32 EYES_MAX_ANGLE = +0.4\n\
float32 EYES_HOME = 0\n\
\n\
float32 MIN_VEL = 0.05\n\
float32 MAX_VEL = 2.6\n\
\n\
### reference ###\n\
# -3.6651 = -7pi/6 = -210 degrees right\n\
# 1.5708 = pi/2 = 90 degrees left\n\
# -0.4363 = -5pi/36 = 25 degrees up\n\
# 0.4363 = 5pi/36 = 25 degrees down\n\
# -1.0471 = -pi/3 = -60 degrees right\n\
# 1.0471 = pi/3 = 60 degrees left\n\
";
  }

  static const char* value(const ::spencer_control_msgs::SetHeadJointPosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spencer_control_msgs::SetHeadJointPosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint);
      stream.next(m.angle);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetHeadJointPosition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spencer_control_msgs::SetHeadJointPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spencer_control_msgs::SetHeadJointPosition_<ContainerAllocator>& v)
  {
    s << indent << "joint: ";
    Printer<int8_t>::stream(s, indent + "  ", v.joint);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPENCER_CONTROL_MSGS_MESSAGE_SETHEADJOINTPOSITION_H
