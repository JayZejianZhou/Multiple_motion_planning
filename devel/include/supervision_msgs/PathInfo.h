// Generated by gencpp from file supervision_msgs/PathInfo.msg
// DO NOT EDIT!


#ifndef SUPERVISION_MSGS_MESSAGE_PATHINFO_H
#define SUPERVISION_MSGS_MESSAGE_PATHINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace supervision_msgs
{
template <class ContainerAllocator>
struct PathInfo_
{
  typedef PathInfo_<ContainerAllocator> Type;

  PathInfo_()
    : total_seconds(0)
    , total_length(0.0)
    , remaining_seconds(0)
    , remaining_length(0.0)  {
    }
  PathInfo_(const ContainerAllocator& _alloc)
    : total_seconds(0)
    , total_length(0.0)
    , remaining_seconds(0)
    , remaining_length(0.0)  {
  (void)_alloc;
    }



   typedef int16_t _total_seconds_type;
  _total_seconds_type total_seconds;

   typedef float _total_length_type;
  _total_length_type total_length;

   typedef int16_t _remaining_seconds_type;
  _remaining_seconds_type remaining_seconds;

   typedef float _remaining_length_type;
  _remaining_length_type remaining_length;




  typedef boost::shared_ptr< ::supervision_msgs::PathInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::supervision_msgs::PathInfo_<ContainerAllocator> const> ConstPtr;

}; // struct PathInfo_

typedef ::supervision_msgs::PathInfo_<std::allocator<void> > PathInfo;

typedef boost::shared_ptr< ::supervision_msgs::PathInfo > PathInfoPtr;
typedef boost::shared_ptr< ::supervision_msgs::PathInfo const> PathInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::supervision_msgs::PathInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::supervision_msgs::PathInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace supervision_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'supervision_msgs': ['/home/zejian/catkin_ws/src/pedsim_ros/visualization/spencer_messages/supervision/supervision_msgs/msg', '/home/zejian/catkin_ws/devel/share/supervision_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::supervision_msgs::PathInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::supervision_msgs::PathInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::supervision_msgs::PathInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::supervision_msgs::PathInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::supervision_msgs::PathInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::supervision_msgs::PathInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::supervision_msgs::PathInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "14255af10539725f58e7cb7d2173aba9";
  }

  static const char* value(const ::supervision_msgs::PathInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x14255af10539725fULL;
  static const uint64_t static_value2 = 0x58e7cb7d2173aba9ULL;
};

template<class ContainerAllocator>
struct DataType< ::supervision_msgs::PathInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "supervision_msgs/PathInfo";
  }

  static const char* value(const ::supervision_msgs::PathInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::supervision_msgs::PathInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 total_seconds\n\
float32 total_length\n\
int16 remaining_seconds\n\
float32 remaining_length\n\
";
  }

  static const char* value(const ::supervision_msgs::PathInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::supervision_msgs::PathInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.total_seconds);
      stream.next(m.total_length);
      stream.next(m.remaining_seconds);
      stream.next(m.remaining_length);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::supervision_msgs::PathInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::supervision_msgs::PathInfo_<ContainerAllocator>& v)
  {
    s << indent << "total_seconds: ";
    Printer<int16_t>::stream(s, indent + "  ", v.total_seconds);
    s << indent << "total_length: ";
    Printer<float>::stream(s, indent + "  ", v.total_length);
    s << indent << "remaining_seconds: ";
    Printer<int16_t>::stream(s, indent + "  ", v.remaining_seconds);
    s << indent << "remaining_length: ";
    Printer<float>::stream(s, indent + "  ", v.remaining_length);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUPERVISION_MSGS_MESSAGE_PATHINFO_H
