// Generated by gencpp from file supervision_msgs/MoveToPoseFeedback.msg
// DO NOT EDIT!


#ifndef SUPERVISION_MSGS_MESSAGE_MOVETOPOSEFEEDBACK_H
#define SUPERVISION_MSGS_MESSAGE_MOVETOPOSEFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace supervision_msgs
{
template <class ContainerAllocator>
struct MoveToPoseFeedback_
{
  typedef MoveToPoseFeedback_<ContainerAllocator> Type;

  MoveToPoseFeedback_()
    : last_pose()  {
    }
  MoveToPoseFeedback_(const ContainerAllocator& _alloc)
    : last_pose(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _last_pose_type;
  _last_pose_type last_pose;




  typedef boost::shared_ptr< ::supervision_msgs::MoveToPoseFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::supervision_msgs::MoveToPoseFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct MoveToPoseFeedback_

typedef ::supervision_msgs::MoveToPoseFeedback_<std::allocator<void> > MoveToPoseFeedback;

typedef boost::shared_ptr< ::supervision_msgs::MoveToPoseFeedback > MoveToPoseFeedbackPtr;
typedef boost::shared_ptr< ::supervision_msgs::MoveToPoseFeedback const> MoveToPoseFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::supervision_msgs::MoveToPoseFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::supervision_msgs::MoveToPoseFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace supervision_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'supervision_msgs': ['/home/zejian/catkin_ws/src/pedsim_ros/visualization/spencer_messages/supervision/supervision_msgs/msg', '/home/zejian/catkin_ws/devel/share/supervision_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::supervision_msgs::MoveToPoseFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::supervision_msgs::MoveToPoseFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::supervision_msgs::MoveToPoseFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::supervision_msgs::MoveToPoseFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::supervision_msgs::MoveToPoseFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::supervision_msgs::MoveToPoseFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::supervision_msgs::MoveToPoseFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eedb0c3cc4c066c2f29f23f55a78bb1b";
  }

  static const char* value(const ::supervision_msgs::MoveToPoseFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeedb0c3cc4c066c2ULL;
  static const uint64_t static_value2 = 0xf29f23f55a78bb1bULL;
};

template<class ContainerAllocator>
struct DataType< ::supervision_msgs::MoveToPoseFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "supervision_msgs/MoveToPoseFeedback";
  }

  static const char* value(const ::supervision_msgs::MoveToPoseFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::supervision_msgs::MoveToPoseFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
geometry_msgs/Pose[] last_pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::supervision_msgs::MoveToPoseFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::supervision_msgs::MoveToPoseFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.last_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveToPoseFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::supervision_msgs::MoveToPoseFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::supervision_msgs::MoveToPoseFeedback_<ContainerAllocator>& v)
  {
    s << indent << "last_pose[]" << std::endl;
    for (size_t i = 0; i < v.last_pose.size(); ++i)
    {
      s << indent << "  last_pose[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.last_pose[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUPERVISION_MSGS_MESSAGE_MOVETOPOSEFEEDBACK_H
