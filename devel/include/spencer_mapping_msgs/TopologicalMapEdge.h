// Generated by gencpp from file spencer_mapping_msgs/TopologicalMapEdge.msg
// DO NOT EDIT!


#ifndef SPENCER_MAPPING_MSGS_MESSAGE_TOPOLOGICALMAPEDGE_H
#define SPENCER_MAPPING_MSGS_MESSAGE_TOPOLOGICALMAPEDGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spencer_mapping_msgs
{
template <class ContainerAllocator>
struct TopologicalMapEdge_
{
  typedef TopologicalMapEdge_<ContainerAllocator> Type;

  TopologicalMapEdge_()
    : id(0)
    , src(0)
    , dest(0)
    , cost()  {
    }
  TopologicalMapEdge_(const ContainerAllocator& _alloc)
    : id(0)
    , src(0)
    , dest(0)
    , cost(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _id_type;
  _id_type id;

   typedef uint32_t _src_type;
  _src_type src;

   typedef uint32_t _dest_type;
  _dest_type dest;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _cost_type;
  _cost_type cost;




  typedef boost::shared_ptr< ::spencer_mapping_msgs::TopologicalMapEdge_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spencer_mapping_msgs::TopologicalMapEdge_<ContainerAllocator> const> ConstPtr;

}; // struct TopologicalMapEdge_

typedef ::spencer_mapping_msgs::TopologicalMapEdge_<std::allocator<void> > TopologicalMapEdge;

typedef boost::shared_ptr< ::spencer_mapping_msgs::TopologicalMapEdge > TopologicalMapEdgePtr;
typedef boost::shared_ptr< ::spencer_mapping_msgs::TopologicalMapEdge const> TopologicalMapEdgeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spencer_mapping_msgs::TopologicalMapEdge_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spencer_mapping_msgs::TopologicalMapEdge_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace spencer_mapping_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'spencer_mapping_msgs': ['/home/zejian/catkin_ws/src/pedsim_ros/visualization/spencer_messages/mapping/spencer_mapping_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::spencer_mapping_msgs::TopologicalMapEdge_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spencer_mapping_msgs::TopologicalMapEdge_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spencer_mapping_msgs::TopologicalMapEdge_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spencer_mapping_msgs::TopologicalMapEdge_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spencer_mapping_msgs::TopologicalMapEdge_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spencer_mapping_msgs::TopologicalMapEdge_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spencer_mapping_msgs::TopologicalMapEdge_<ContainerAllocator> >
{
  static const char* value()
  {
    return "86b28ab9fe2c0ee0b1718165f3e65470";
  }

  static const char* value(const ::spencer_mapping_msgs::TopologicalMapEdge_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x86b28ab9fe2c0ee0ULL;
  static const uint64_t static_value2 = 0xb1718165f3e65470ULL;
};

template<class ContainerAllocator>
struct DataType< ::spencer_mapping_msgs::TopologicalMapEdge_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spencer_mapping_msgs/TopologicalMapEdge";
  }

  static const char* value(const ::spencer_mapping_msgs::TopologicalMapEdge_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spencer_mapping_msgs::TopologicalMapEdge_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This format is adapted from the Fuerte topological_navigation stack.\n\
\n\
# Info stored with an edge in the topological map\n\
\n\
# Id of this edge in the topological map\n\
uint32 id\n\
\n\
# Id of the source node\n\
uint32 src\n\
\n\
# Id of the destination node\n\
uint32 dest\n\
\n\
# Costs of this edge\n\
float32[] cost\n\
";
  }

  static const char* value(const ::spencer_mapping_msgs::TopologicalMapEdge_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spencer_mapping_msgs::TopologicalMapEdge_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.src);
      stream.next(m.dest);
      stream.next(m.cost);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TopologicalMapEdge_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spencer_mapping_msgs::TopologicalMapEdge_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spencer_mapping_msgs::TopologicalMapEdge_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "src: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.src);
    s << indent << "dest: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dest);
    s << indent << "cost[]" << std::endl;
    for (size_t i = 0; i < v.cost.size(); ++i)
    {
      s << indent << "  cost[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cost[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPENCER_MAPPING_MSGS_MESSAGE_TOPOLOGICALMAPEDGE_H
