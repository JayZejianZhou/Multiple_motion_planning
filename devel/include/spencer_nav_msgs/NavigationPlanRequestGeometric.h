// Generated by gencpp from file spencer_nav_msgs/NavigationPlanRequestGeometric.msg
// DO NOT EDIT!


#ifndef SPENCER_NAV_MSGS_MESSAGE_NAVIGATIONPLANREQUESTGEOMETRIC_H
#define SPENCER_NAV_MSGS_MESSAGE_NAVIGATIONPLANREQUESTGEOMETRIC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <spencer_tracking_msgs/DetectedPersons.h>
#include <spencer_tracking_msgs/TrackedPersons.h>
#include <spencer_tracking_msgs/TrackedGroups.h>
#include <spencer_nav_msgs/NavParams.h>

namespace spencer_nav_msgs
{
template <class ContainerAllocator>
struct NavigationPlanRequestGeometric_
{
  typedef NavigationPlanRequestGeometric_<ContainerAllocator> Type;

  NavigationPlanRequestGeometric_()
    : header()
    , start()
    , goal()
    , detectedPersons()
    , trackedPersons()
    , trackedGroups()
    , params()  {
    }
  NavigationPlanRequestGeometric_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , start(_alloc)
    , goal(_alloc)
    , detectedPersons(_alloc)
    , trackedPersons(_alloc)
    , trackedGroups(_alloc)
    , params(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _start_type;
  _start_type start;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _goal_type;
  _goal_type goal;

   typedef  ::spencer_tracking_msgs::DetectedPersons_<ContainerAllocator>  _detectedPersons_type;
  _detectedPersons_type detectedPersons;

   typedef  ::spencer_tracking_msgs::TrackedPersons_<ContainerAllocator>  _trackedPersons_type;
  _trackedPersons_type trackedPersons;

   typedef  ::spencer_tracking_msgs::TrackedGroups_<ContainerAllocator>  _trackedGroups_type;
  _trackedGroups_type trackedGroups;

   typedef  ::spencer_nav_msgs::NavParams_<ContainerAllocator>  _params_type;
  _params_type params;




  typedef boost::shared_ptr< ::spencer_nav_msgs::NavigationPlanRequestGeometric_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spencer_nav_msgs::NavigationPlanRequestGeometric_<ContainerAllocator> const> ConstPtr;

}; // struct NavigationPlanRequestGeometric_

typedef ::spencer_nav_msgs::NavigationPlanRequestGeometric_<std::allocator<void> > NavigationPlanRequestGeometric;

typedef boost::shared_ptr< ::spencer_nav_msgs::NavigationPlanRequestGeometric > NavigationPlanRequestGeometricPtr;
typedef boost::shared_ptr< ::spencer_nav_msgs::NavigationPlanRequestGeometric const> NavigationPlanRequestGeometricConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spencer_nav_msgs::NavigationPlanRequestGeometric_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spencer_nav_msgs::NavigationPlanRequestGeometric_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace spencer_nav_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'spencer_tracking_msgs': ['/home/zejian/catkin_ws/src/pedsim_ros/visualization/spencer_messages/perception/spencer_tracking_msgs/msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'spencer_nav_msgs': ['/home/zejian/catkin_ws/src/pedsim_ros/visualization/spencer_messages/planning/spencer_nav_msgs/msg'], 'spencer_mapping_msgs': ['/home/zejian/catkin_ws/src/pedsim_ros/visualization/spencer_messages/mapping/spencer_mapping_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::spencer_nav_msgs::NavigationPlanRequestGeometric_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spencer_nav_msgs::NavigationPlanRequestGeometric_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spencer_nav_msgs::NavigationPlanRequestGeometric_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spencer_nav_msgs::NavigationPlanRequestGeometric_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spencer_nav_msgs::NavigationPlanRequestGeometric_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spencer_nav_msgs::NavigationPlanRequestGeometric_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spencer_nav_msgs::NavigationPlanRequestGeometric_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d831e9baee74d326802d8896d95cac62";
  }

  static const char* value(const ::spencer_nav_msgs::NavigationPlanRequestGeometric_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd831e9baee74d326ULL;
  static const uint64_t static_value2 = 0x802d8896d95cac62ULL;
};

template<class ContainerAllocator>
struct DataType< ::spencer_nav_msgs::NavigationPlanRequestGeometric_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spencer_nav_msgs/NavigationPlanRequestGeometric";
  }

  static const char* value(const ::spencer_nav_msgs::NavigationPlanRequestGeometric_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spencer_nav_msgs::NavigationPlanRequestGeometric_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# message defining a planning request to motion planner from task planner\n\
\n\
# TODO: Is this message definition deprecated!?\n\
# I believe move_base uses a PoseStamped (on a separate topic) to specify the goal;\n\
# the other information (tracked persons etc.) are published on separate topics anyway,\n\
# so it probably does not make much sense to include them here. --Timm\n\
\n\
Header header\n\
geometry_msgs/Pose  start				# start position\n\
geometry_msgs/Pose  goal				# goal position\n\
spencer_tracking_msgs/DetectedPersons detectedPersons	# detected persons from perception\n\
spencer_tracking_msgs/TrackedPersons trackedPersons	# tracked persons from perception\n\
spencer_tracking_msgs/TrackedGroups trackedGroups	# tracked groups \n\
NavParams params					# parameters / strategies fror motion planner to adapt to\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: spencer_tracking_msgs/DetectedPersons\n\
# Message with all currently detected persons\n\
#\n\
\n\
Header                  header          # Header containing timestamp etc. of this message\n\
DetectedPerson[]        detections      # All persons that are currently being detected\n\
================================================================================\n\
MSG: spencer_tracking_msgs/DetectedPerson\n\
# Message describing a detection of a person\n\
#\n\
\n\
# Unique id of the detection, monotonically increasing over time\n\
uint64          detection_id\n\
\n\
# (Pseudo-)probabilistic value between 0.0 and 1.0 describing the detector's confidence in the detection\n\
float64         confidence\n\
\n\
# 3D pose (position + orientation) of the *center* of the detection\n\
# check covariance to see which dimensions are actually set! unset dimensions shall have a covariance > 9999\n\
geometry_msgs/PoseWithCovariance    pose    \n\
\n\
# Sensor modality / detector type, see example constants below. \n\
# used e.g. later in tracking to check which tracks have been visually confirmed\n\
string          modality            \n\
\n\
                                    \n\
string          MODALITY_GENERIC_LASER_2D = laser2d\n\
string          MODALITY_GENERIC_LASER_3D = laser3d\n\
string          MODALITY_GENERIC_MONOCULAR_VISION = mono\n\
string          MODALITY_GENERIC_STEREO_VISION = stereo\n\
string          MODALITY_GENERIC_RGBD = rgbd\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: spencer_tracking_msgs/TrackedPersons\n\
# Message with all currently tracked persons \n\
#\n\
\n\
Header              header      # Header containing timestamp etc. of this message\n\
TrackedPerson[]     tracks      # All persons that are currently being tracked\n\
================================================================================\n\
MSG: spencer_tracking_msgs/TrackedPerson\n\
# Message defining a tracked person\n\
#\n\
\n\
uint64      track_id        # unique identifier of the target, consistent over time\n\
bool        is_occluded     # if the track is currently not observable in a physical way\n\
bool        is_matched      # if the track is currently matched by a detection\n\
uint64      detection_id    # id of the corresponding detection in the current cycle (undefined if occluded)\n\
duration    age             # age of the track\n\
\n\
# The following fields are extracted from the Kalman state x and its covariance C\n\
\n\
geometry_msgs/PoseWithCovariance       pose   # pose of the track (z value and orientation might not be set, check if corresponding variance on diagonal is > 99999)\n\
\n\
geometry_msgs/TwistWithCovariance   twist     # velocity of the track (z value and rotational velocities might not be set, check if corresponding variance on diagonal is > 99999)\n\
\n\
================================================================================\n\
MSG: geometry_msgs/TwistWithCovariance\n\
# This expresses velocity in free space with uncertainty.\n\
\n\
Twist twist\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: spencer_tracking_msgs/TrackedGroups\n\
# Message with all currently tracked groups \n\
#\n\
\n\
Header              header      # Header containing timestamp etc. of this message\n\
TrackedGroup[]      groups      # All groups that are currently being tracked\n\
================================================================================\n\
MSG: spencer_tracking_msgs/TrackedGroup\n\
# Message defining a tracked group\n\
#\n\
\n\
uint64      group_id        # unique identifier of the target, consistent over time\n\
\n\
duration    age             # age of the group\n\
\n\
geometry_msgs/PoseWithCovariance    centerOfGravity   # mean and covariance of the group (calculated from its person tracks)\n\
\n\
uint64[]    track_ids       # IDs of the tracked persons in this group. See srl_tracking_msgs/TrackedPersons\n\
================================================================================\n\
MSG: spencer_nav_msgs/NavParams\n\
# message defining a parameters or strategies for motion planner to adapt based on input from learning\n\
\n\
Header header\n\
bool directional_cost	# if to use directional_cost model or not\n\
";
  }

  static const char* value(const ::spencer_nav_msgs::NavigationPlanRequestGeometric_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spencer_nav_msgs::NavigationPlanRequestGeometric_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.start);
      stream.next(m.goal);
      stream.next(m.detectedPersons);
      stream.next(m.trackedPersons);
      stream.next(m.trackedGroups);
      stream.next(m.params);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavigationPlanRequestGeometric_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spencer_nav_msgs::NavigationPlanRequestGeometric_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spencer_nav_msgs::NavigationPlanRequestGeometric_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "start: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.start);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
    s << indent << "detectedPersons: ";
    s << std::endl;
    Printer< ::spencer_tracking_msgs::DetectedPersons_<ContainerAllocator> >::stream(s, indent + "  ", v.detectedPersons);
    s << indent << "trackedPersons: ";
    s << std::endl;
    Printer< ::spencer_tracking_msgs::TrackedPersons_<ContainerAllocator> >::stream(s, indent + "  ", v.trackedPersons);
    s << indent << "trackedGroups: ";
    s << std::endl;
    Printer< ::spencer_tracking_msgs::TrackedGroups_<ContainerAllocator> >::stream(s, indent + "  ", v.trackedGroups);
    s << indent << "params: ";
    s << std::endl;
    Printer< ::spencer_nav_msgs::NavParams_<ContainerAllocator> >::stream(s, indent + "  ", v.params);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPENCER_NAV_MSGS_MESSAGE_NAVIGATIONPLANREQUESTGEOMETRIC_H
