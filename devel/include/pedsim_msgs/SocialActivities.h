// Generated by gencpp from file pedsim_msgs/SocialActivities.msg
// DO NOT EDIT!


#ifndef PEDSIM_MSGS_MESSAGE_SOCIALACTIVITIES_H
#define PEDSIM_MSGS_MESSAGE_SOCIALACTIVITIES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <pedsim_msgs/SocialActivity.h>

namespace pedsim_msgs
{
template <class ContainerAllocator>
struct SocialActivities_
{
  typedef SocialActivities_<ContainerAllocator> Type;

  SocialActivities_()
    : header()
    , elements()  {
    }
  SocialActivities_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , elements(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::pedsim_msgs::SocialActivity_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pedsim_msgs::SocialActivity_<ContainerAllocator> >::other >  _elements_type;
  _elements_type elements;




  typedef boost::shared_ptr< ::pedsim_msgs::SocialActivities_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pedsim_msgs::SocialActivities_<ContainerAllocator> const> ConstPtr;

}; // struct SocialActivities_

typedef ::pedsim_msgs::SocialActivities_<std::allocator<void> > SocialActivities;

typedef boost::shared_ptr< ::pedsim_msgs::SocialActivities > SocialActivitiesPtr;
typedef boost::shared_ptr< ::pedsim_msgs::SocialActivities const> SocialActivitiesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pedsim_msgs::SocialActivities_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pedsim_msgs::SocialActivities_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pedsim_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'pedsim_msgs': ['/home/zejian/catkin_ws/src/pedsim_ros/pedsim_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pedsim_msgs::SocialActivities_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pedsim_msgs::SocialActivities_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pedsim_msgs::SocialActivities_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pedsim_msgs::SocialActivities_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pedsim_msgs::SocialActivities_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pedsim_msgs::SocialActivities_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pedsim_msgs::SocialActivities_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ca56b183969705615c620702275b430f";
  }

  static const char* value(const ::pedsim_msgs::SocialActivities_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xca56b18396970561ULL;
  static const uint64_t static_value2 = 0x5c620702275b430fULL;
};

template<class ContainerAllocator>
struct DataType< ::pedsim_msgs::SocialActivities_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pedsim_msgs/SocialActivities";
  }

  static const char* value(const ::pedsim_msgs::SocialActivities_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pedsim_msgs::SocialActivities_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header     header\n\
\n\
# All social activities that have been detected in the current time step,\n\
# within sensor range of the robot.\n\
SocialActivity[]    elements\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: pedsim_msgs/SocialActivity\n\
string      type        # see constants below\n\
float32     confidence  # detection confidence\n\
\n\
uint64[]      track_ids   # IDs of all person tracks involved in the activity, might be one or multiple\n\
\n\
\n\
# Constants for social activity type (just examples at the moment)\n\
string      TYPE_SHOPPING = shopping\n\
string      TYPE_STANDING = standing\n\
string      TYPE_INDIVIDUAL_MOVING = individual_moving\n\
string      TYPE_WAITING_IN_QUEUE = waiting_in_queue\n\
string      TYPE_LOOKING_AT_INFORMATION_SCREEN = looking_at_information_screen\n\
string      TYPE_LOOKING_AT_KIOSK = looking_at_kiosk\n\
string      TYPE_GROUP_ASSEMBLING = group_assembling\n\
string      TYPE_GROUP_MOVING = group_moving\n\
string      TYPE_FLOW_WITH_ROBOT = flow\n\
string      TYPE_ANTIFLOW_AGAINST_ROBOT = antiflow\n\
string      TYPE_WAITING_FOR_OTHERS = waiting_for_others\n\
\n\
#string      TYPE_COMMUNICATING = communicating\n\
#string      TYPE_TAKING_PHOTOGRAPH = taking_photograph\n\
#string      TYPE_TALKING_ON_PHONE = talking_on_phone\n\
";
  }

  static const char* value(const ::pedsim_msgs::SocialActivities_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pedsim_msgs::SocialActivities_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.elements);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SocialActivities_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pedsim_msgs::SocialActivities_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pedsim_msgs::SocialActivities_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "elements[]" << std::endl;
    for (size_t i = 0; i < v.elements.size(); ++i)
    {
      s << indent << "  elements[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pedsim_msgs::SocialActivity_<ContainerAllocator> >::stream(s, indent + "    ", v.elements[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PEDSIM_MSGS_MESSAGE_SOCIALACTIVITIES_H
